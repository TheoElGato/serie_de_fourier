from generator import Figure
from vecteur import *


# figure = [[-200, -200], [-196, -200], [-192, -200], [-188, -200], [-184, -200], [-180, -200], [-176, -200], [-172, -200], [-168, -200], [-164, -200], [-160, -200], [-156, -200], [-152, -200], [-148, -200], [-144, -200], [-140, -200], [-136, -200], [-132, -200], [-128, -200], [-124, -200], [-120, -200], [-116, -200], [-112, -200], [-108, -200], [-104, -200], [-100, -200], [-96, -200], [-92, -200], [-88, -200], [-84, -200], [-80, -200], [-76, -200], [-72, -200], [-68, -200], [-64, -200], [-60, -200], [-56, -200], [-52, -200], [-48, -200], [-44, -200], [-40, -200], [-36, -200], [-32, -200], [-28, -200], [-24, -200], [-20, -200], [-16, -200], [-12, -200], [-8, -200], [-4, -200], [0, -200], [4, -200], [8, -200], [12, -200], [16, -200], [20, -200], [24, -200], [28, -200], [32, -200], [36, -200], [40, -200], [44, -200], [48, -200], [52, -200], [56, -200], [60, -200], [64, -200], [68, -200], [72, -200], [76, -200], [80, -200], [84, -200], [88, -200], [92, -200], [96, -200], [100, -200], [104, -200], [108, -200], [112, -200], [116, -200], [120, -200], [124, -200], [128, -200], [132, -200], [136, -200], [140, -200], [144, -200], [148, -200], [152, -200], [156, -200], [160, -200], [164, -200], [168, -200], [172, -200], [176, -200], [180, -200], [184, -200], [188, -200], [192, -200], [196, -200], [200, -196], [200, -192], [200, -188], [200, -184], [200, -180], [200, -176], [200, -172], [200, -168], [200, -164], [200, -160], [200, -156], [200, -152], [200, -148], [200, -144], [200, -140], [200, -136], [200, -132], [200, -128], [200, -124], [200, -120], [200, -116], [200, -112], [200, -108], [200, -104], [200, -100], [200, -96], [200, -92], [200, -88], [200, -84], [200, -80], [200, -76], [200, -72], [200, -68], [200, -64], [200, -60], [200, -56], [200, -52], [200, -48], [200, -44], [200, -40], [200, -36], [200, -32], [200, -28], [200, -24], [200, -20], [200, -16], [200, -12], [200, -8], [200, -4], [200, 0], [200, 4], [200, 8], [200, 12], [200, 16], [200, 20], [200, 24], [200, 28], [200, 32], [200, 36], [200, 40], [200, 44], [200, 48], [200, 52], [200, 56], [200, 60], [200, 64], [200, 68], [200, 72], [200, 76], [200, 80], [200, 84], [200, 88], [200, 92], [200, 96], [200, 100], [200, 104], [200, 108], [200, 112], [200, 116], [200, 120], [200, 124], [200, 128], [200, 132], [200, 136], [200, 140], [200, 144], [200, 148], [200, 152], [200, 156], [200, 160], [200, 164], [200, 168], [200, 172], [200, 176], [200, 180], [200, 184], [200, 188], [200, 192], [200, 196], [196, 200], [192, 200], [188, 200], [184, 200], [180, 200], [176, 200], [172, 200], [168, 200], [164, 200], [160, 200], [156, 200], [152, 200], [148, 200], [144, 200], [140, 200], [136, 200], [132, 200], [128, 200], [124, 200], [120, 200], [116, 200], [112, 200], [108, 200], [104, 200], [100, 200], [96, 200], [92, 200], [88, 200], [84, 200], [80, 200], [76, 200], [72, 200], [68, 200], [64, 200], [60, 200], [56, 200], [52, 200], [48, 200], [44, 200], [40, 200], [36, 200], [32, 200], [28, 200], [24, 200], [20, 200], [16, 200], [12, 200], [8, 200], [4, 200], [0, 200], [-4, 200], [-8, 200], [-12, 200], [-16, 200], [-20, 200], [-24, 200], [-28, 200], [-32, 200], [-36, 200], [-40, 200], [-44, 200], [-48, 200], [-52, 200], [-56, 200], [-60, 200], [-64, 200], [-68, 200], [-72, 200], [-76, 200], [-80, 200], [-84, 200], [-88, 200], [-92, 200], [-96, 200], [-100, 200], [-104, 200], [-108, 200], [-112, 200], [-116, 200], [-120, 200], [-124, 200], [-128, 200], [-132, 200], [-136, 200], [-140, 200], [-144, 200], [-148, 200], [-152, 200], [-156, 200], [-160, 200], [-164, 200], [-168, 200], [-172, 200], [-176, 200], [-180, 200], [-184, 200], [-188, 200], [-192, 200], [-196, 200], [-200, 192], [-200, 188], [-200, 184], [-200, 180], [-200, 176], [-200, 172], [-200, 168], [-200, 164], [-200, 160], [-200, 156], [-200, 152], [-200, 148], [-200, 144], [-200, 140], [-200, 136], [-200, 132], [-200, 128], [-200, 124], [-200, 120], [-200, 116], [-200, 112], [-200, 108], [-200, 104], [-200, 100], [-200, 96], [-200, 92], [-200, 88], [-200, 84], [-200, 80], [-200, 76], [-200, 72], [-200, 68], [-200, 64], [-200, 60], [-200, 56], [-200, 52], [-200, 48], [-200, 44], [-200, 40], [-200, 36], [-200, 32], [-200, 28], [-200, 24], [-200, 20], [-200, 16], [-200, 12], [-200, 8], [-200, 4], [-200, 0], [-200, -4], [-200, -8], [-200, -12], [-200, -16], [-200, -20], [-200, -24], [-200, -28], [-200, -32], [-200, -36], [-200, -40], [-200, -44], [-200, -48], [-200, -52], [-200, -56], [-200, -60], [-200, -64], [-200, -68], [-200, -72], [-200, -76], [-200, -80], [-200, -84], [-200, -88], [-200, -92], [-200, -96], [-200, -100], [-200, -104], [-200, -108], [-200, -112], [-200, -116], [-200, -120], [-200, -124], [-200, -128], [-200, -132], [-200, -136], [-200, -140], [-200, -144], [-200, -148], [-200, -152], [-200, -156], [-200, -160], [-200, -164], [-200, -168], [-200, -172], [-200, -176], [-200, -180], [-200, -184], [-200, -188], [-200, -192], [-200, -196]]

TWO_PI = math.pi * 2

class Complex:
    def __init__(self, re, im):
        self.re = re
        self.im = im

    def add(self, other):
        self.im += other.im
        self.re += other.re

    def mult(self, other):
        re = self.re * other.re - self.im * other.im;
        im = self.re * other.im + self.im * other.re;
        return Complex(re, im);

class Dessin:
    def __init__(self, screen, precision, figure):
        self.precision = precision*2+1
        self.para = []
        self.draw = []
        self.screen = screen
        self.figure = []
        for i in figure:
            self.figure.append(Complex(i[0], i[1]))
        self.fourier = dft(self.figure)

    def draw_figure(self, screen, t):
        x, y = 0, 0
        for i in range(len(self.fourier)):
            prevx = x
            prevy = y
            freq = self.fourier[i][2]
            radius = self.fourier[i][3]
            phase = self.fourier[i][4]
            x += radius * math.cos(freq * t + phase)
            y += radius * math.sin(freq * t + phase)
            pygame.draw.line(screen, 0, to_pygame_vec(prevx, prevy), to_pygame_vec(x, y))

        self.draw.append([x, y])
        for i in self.draw:
            point(self.screen, pygame.Vector2(i[0], i[1]))
        if len(self.draw) > 600:
            self.draw.pop(0)


    def path(self, f):
        return self.figure[f]

    def add_pos_tab(self, tab1, tab2):
        return [tab1[0] + tab2[0], tab1[1] + tab2[1]]

    def mult_tab_int(self, tab1, a):
        return [tab1[0] * a, tab1[1] * a]

    def mult_pos_tab(self, tab1, tab2):
        a = tab1[0]
        b = tab1[1]
        ap = tab2[0]
        bp = tab2[1]
        return [a * ap - b * bp, a * bp + b * ap]

    def mult_pos_vec(self, vec1, vec2):
        a = vec1.x
        b = vec1.y
        ap = vec2.x
        bp = vec2.y
        return [a * ap - b * bp, a * bp + b * ap]

    def dummy_vecteur(self, t, n):
        x = math.cos(-n * t * (math.pi * 2))
        y = math.sin(-n * t * (math.pi * 2))
        return [x, y]

def dft(x):
  X = []
  N = len(x)
  for k in range(int(N*0.8)):
    sum = Complex(0, 0)
    for n in range(N):
      phi = (TWO_PI * k * n) / N
      c = Complex(math.cos(phi), -1*math.sin(phi))
      sum.add(x[n].mult(c))

    sum.re = sum.re / N
    sum.im = sum.im / N

    freq = k;
    amp = math.sqrt(sum.re * sum.re + sum.im * sum.im)
    phase = math.atan2(sum.im, sum.re)
    X.append([sum.re, sum.im, freq, amp, phase])
  return X

